
/*
  Three ways to implement the factorial function in SPL.
  First the recursive version.
*/

Int facR (Int n) {
  if (n < 2)
    return 1;
  else
    return n * facR(n - 1);
}

// The iterative version of the factorial function.
Int facI (Int n)
{
  Int r = 1;
  while (n > 1) {
    r = r * n;
    n = n - 1;
  }
  return r;
}

// A main function to theck the results.
Void main ()
{
  Int n = 0;
  Int facN = 1;
  Bool ok = True;
  while (n < 20) {
    facN = facR(n);
    if (facN != facI(n) || facN != facL(n)) {
      print (n : facN : facI(n) : facL(n) : []);
      ok = False;
    }
    n = n + 1;
  }
  print (ok);
}

// A list based factorial function
// Defined here to show that functions can be given in any order (unlike C)
Int facL (Int n) {
  return product (fromTo(1, n));
}

// Computes the product of a list of integers
Int product ([Int] list)
{
  if (isEmpty(list))
    return 1;
  else
    return list.hd * product(list.tl);
}

// Generates a list of integers from the first to the las argument
[Int] fromTo (Int from, Int to) {
  if (from <= to)
    return from : fromTo(from + 1, to);
  else
    return [];
}

// Make a reversed copy of any list
[t] reverse ([t] list) {
  [t] accu = [];
  while (!isEmpty(list)) {
    accu = list.hd : accu;
    list = list.tl;
  }
  return accu;
}

// Absolute value, in a strange layout
Int abs (Int n) { if (n < 0) return -n; else return n; }

// Make of copy of a tuple with swapped elements
(b, a) swapCopy ((a, b) pair) {
  return (pair.snd, pair.fst);
}

// Swap the elements in a tuple
(a, a) swap ((a, a) tuple)
{
  a tmp = tuple.fst;
  tuple.fst = tuple.snd;
  tuple.snd = tmp;
  return tuple;
}

// list append
[t] append ([t] l1, [t] l2)
{
  if (isEmpty(l1))
    return l2;
  else
  {
    l1.tl = append(l1.tl, l2);
    return l1;
  }
}

// Square the odd numbers is a list and remove the even numbers
[Int] squareOddNumbers ([Int] list) {
  while (!isEmpty(list) && list.hd % 2 == 0)
    list = list.tl;

  if (!isEmpty(list)) {
    list.hd = list.hd * list.hd;
    list.tl = squareOddNumbers(list.tl);
  }
  
  return list;
}
