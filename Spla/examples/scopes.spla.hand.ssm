// 
// (unit -> int) main = fun () {
//   int x = 3;
//   (int -> int) f = fun (y) {
//     return x + y;
//   };
//   return f(4);
// };
// 



              stmh 0
              str MP    // create program# frame on heap
              ldr SP
              ldc 1
              add
              str R5 // store start of args in R5
              ldc 0     // unit arg for main()
              bsr _main // call main(())
              ajs -1

              ldr RR
              trap 0
              halt

__main:       ldr PC
              ldc 6
              add
              str RR
              ret

_main:        ldr MP    // to save old MP
              ldc 0     // reserve space for x
              ldc 0     // reserve space for f
              stmh 3    // create new heap frame main#1
              ldc 2
              sub
              str MP    // and set MP to point to it

              ldc 3
              stl 1     // save in x
              bsr __main_f
              ldr RR    // get location of main.f code
              stl 2     // save in f

              ldr SP
              ldc 1
              add
              str R5    // store start of args in R5
              ldc 4
              ldl 2     // get f
              jsr       // call f(4)
              ajs -1
              ldr RR
              str RR

              ldr MP
              ldh 0
              str MP     // restore old MP
              ldr R5
              ldh 0
              str R5     // restore old R5
              ret

__main_f:     ldr PC
              ldc 6
              add
              str RR
              ret

_main_f:      ldr MP    // to save old MP
              stmh 1    // create new heap frame main.f#1
              ldc 0
              sub
              str MP    // and set MP to point to it

              ldr MP
              ldh 0
              lda 1     // get x
              ldr R5
              lda 0     // get y
              add
              str RR

              ldr MP
              ldh 0
              str MP     // restore old MP
              ldr R5
              ldh 0
              str R5     // restore old R5
              ret