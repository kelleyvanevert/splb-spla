
data list = Nil
          | Cons(int, list)
          ;

(unit -> int) main = fun () {
    list l1 = Cons(4, Cons(5, Cons(6, Nil)));
    [int] l2 = [7, 8, 9];
    mapl(print, l1);
    map(print, l2);
    return 1;
  };


((int -> 'a) -> list -> ['a]) mapl = fun (f, l) {
    return match l {
      | Nil -> []
      | Cons(x, rest) -> f(x) : mapl(f, rest)
    };
  };

((int -> 'a) -> [int] -> ['a]) map = fun (f, l) {
    return match l {
      | [] -> []
      | x:rest -> f(x) : map(f, rest)
    };
  };
