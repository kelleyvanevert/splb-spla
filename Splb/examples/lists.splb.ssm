           link 0     // enter program
           ldc 0      // unit arg for main()
           bsr _main  // call main()
           ldr RR     
           trap 0     
           halt       
                      
_main:     link 2     // enter fn, allocate locals
           annote MP 1 1 orange "local x" 
           annote MP 2 2 orange "init? local x" 
           ldc 0      
           ldc 0      
           ajs -1     // start perform cons
           sth        
           ajs 1      
           sth        
           ajs -1     // end perform cons
           stl 1      
           ldc 1      
           stl 2      
           ldc 5      
           ldc 0      
           ajs -1     // start perform cons
           sth        
           ajs 1      
           sth        
           ajs -1     // end perform cons
           ldl 2      
           brf _EXCEPTION_UninitiatedVar 
           ldl 1      
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           sta 0      // start save hd
           lds 2      // end save hd
           ldl 2      
           brf _EXCEPTION_UninitiatedVar 
           ldl 1      
           bsr _f     
           ajs -1     
           ldl 2      
           brf _EXCEPTION_UninitiatedVar 
           ldl 1      
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           ldh 0      // access hd
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           ldh 0      // access hd
           bsr _print 
           ajs -1     
           ldl 2      
           brf _EXCEPTION_UninitiatedVar 
           ldl 1      
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           ldh 0      // access hd
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           ldh 1      // access tl
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           ldh 0      // access hd
           bsr _print 
           ajs -1     
           ldc 1      
           str RR     
           unlink     
           ret        
                      
_f:        link 0     // enter fn, allocate locals
           ldl -1     
           brf _EXCEPTION_UninitiatedVar 
           ldl -2     
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           ldh 0      // access hd
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           ldh 0      // access hd
           ldl -1     
           brf _EXCEPTION_UninitiatedVar 
           ldl -2     
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           ldh 0      // access hd
           ajs -1     // start perform cons
           sth        
           ajs 1      
           sth        
           ajs -1     // end perform cons
           ldl -1     
           brf _EXCEPTION_UninitiatedVar 
           ldl -2     
           lds 0      // check list non-emptyness
           ldc 0      
           eq         
           brt _EXCEPTION_EmptyList 
           sta 0      // start save hd
           lds 2      // end save hd
           ldc 0      
           str RR     
           unlink     
           ret        
                      
                      // ====== BUILTINS ====== //
                      
_print:    link 0     
           ldl -2     
           trap 0     
           ajs 1      
           str RR     
           unlink     
           ret        
                      
_isEmpty:  link 0     
           ldl -2     
           ldc 0      
           eq         
           str RR     
           unlink     
           ret        
                      
_EXCEPTION_EmptyList: annote SP 0 0 red "EXCEPTION empty list" 
           trap 0     
           halt       
_EXCEPTION_UninitiatedVar: annote SP 0 0 red "EXCEPTION uninitialized var" 
           trap 0     
           halt       
