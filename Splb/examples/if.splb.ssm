           link 0     // enter program
           ldc 0      // unit arg for main()
           bsr _main  // call main()
           ldr RR     
           trap 0     
           halt       
                      
_main:     link 0     // enter fn, allocate locals
           ajs 0      // if
           ldc 0      
           bsr _isEmpty 
           ajs -1     
           ldr RR     
           brf _main_l0 // then
           ldc 4      
           bsr _print 
           ajs -1     
           bra _main_l1 
_main_l0:  ajs 0      // else:
           ldc 5      
           bsr _print 
           ajs -1     
_main_l1:  ajs 0      // endif
           ajs 0      // if
           ldc 0      
           ldc 0      
           ajs -1     // start perform cons
           sth        
           ajs 1      
           sth        
           ajs -1     // end perform cons
           bsr _isEmpty 
           ajs -1     
           ldr RR     
           brf _main_l2 // then
           ldc 6      
           bsr _print 
           ajs -1     
           bra _main_l3 
_main_l2:  ajs 0      // else:
           ldc 7      
           bsr _print 
           ajs -1     
_main_l3:  ajs 0      // endif
           ldc 8      
           str RR     
           unlink     
           ret        
                      
                      // ====== BUILTINS ====== //
                      
_print:    link 0     
           ldl -2     
           trap 0     
           ajs 1      
           str RR     
           unlink     
           ret        
                      
_isEmpty:  link 0     
           ldl -2     
           ldc 0      
           eq         
           str RR     
           unlink     
           ret        
                      
_EXCEPTION_EmptyList: annote SP 0 0 red "EXCEPTION empty list" 
           trap 0     
           halt       
_EXCEPTION_UninitiatedVar: annote SP 0 0 red "EXCEPTION uninitialized var" 
           trap 0     
           halt       
